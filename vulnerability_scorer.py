from typing import Dict
import math

class VulnerabilityScorer:
    def __init__(self):
        self.cvss_weights = {
            'AV': {'N': 0.85, 'A': 0.62, 'L': 0.55, 'P': 0.2},
            'AC': {'L': 0.77, 'H': 0.44},
            'PR': {'N': 0.85, 'L': 0.62, 'H': 0.27},
            'UI': {'N': 0.85, 'R': 0.62},
            'S': {'U': 6.42, 'C': 7.52},
            'C': {'N': 0, 'L': 0.22, 'H': 0.56},
            'I': {'N': 0, 'L': 0.22, 'H': 0.56},
            'A': {'N': 0, 'L': 0.22, 'H': 0.56}
        }

    def calculate_cvss_score(self, vector: str) -> float:
        metrics = dict(m.split(':') for m in vector.split('/')[1:])
        impact = 1 - ((1 - self.cvss_weights['C'][metrics['C']]) *
                      (1 - self.cvss_weights['I'][metrics['I']]) *
                      (1 - self.cvss_weights['A'][metrics['A']]))
        exploitability = (8.22 * self.cvss_weights['AV'][metrics['AV']] *
                          self.cvss_weights['AC'][metrics['AC']] *
                          self.cvss_weights['PR'][metrics['PR']] *
                          self.cvss_weights['UI'][metrics['UI']])
        if metrics['S'] == 'U':
            score = min((impact + exploitability), 10)
        else:
            score = min(1.08 * (impact + exploitability), 10)
        return round(score, 1)

    def calculate_custom_score(self, vulnerability: Dict) -> float:
        base_score = self.calculate_cvss_score(vulnerability['cvss_vector'])
        time_factor = math.exp(-0.1 * vulnerability['days_since_disclosure'])
        exploit_factor = 1.5 if vulnerability['exploit_available'] else 1
        return round(base_score * time_factor * exploit_factor, 2)

scorer = VulnerabilityScorer()