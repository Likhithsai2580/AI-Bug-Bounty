import requests
import json
from typing import List, Dict
from functools import lru_cache
import os

class ExploitDB:
    def __init__(self, cache_dir: str = ".cache"):
        self.base_url = "https://www.exploit-db.com/search"
        self.cache_dir = cache_dir
        os.makedirs(cache_dir, exist_ok=True)

    @lru_cache(maxsize=100)
    def search(self, query: str, vuln_type: str = None) -> List[Dict]:
        cache_file = os.path.join(self.cache_dir, f"{query}_{vuln_type}.json")
        
        if os.path.exists(cache_file):
            with open(cache_file, 'r') as f:
                return json.load(f)

        params = {
            "text": query,
            "type": vuln_type,
            "order_by": "date_published",
            "order": "desc"
        }
        response = requests.get(self.base_url, params=params)
        results = response.json()

        with open(cache_file, 'w') as f:
            json.dump(results, f)

        return self._process_results(results)

    def _process_results(self, results: Dict) -> List[Dict]:
        processed = []
        for exploit in results.get('data', []):
            processed.append({
                'id': exploit['id'],
                'title': exploit['title'],
                'type': exploit['type'],
                'platform': exploit['platform'],
                'author': exploit['author'],
                'date': exploit['date_published'],
                'verified': exploit['verified'],
                'description': exploit['description']
            })
        return processed

    def get_exploit_details(self, exploit_id: int) -> Dict:
        cache_file = os.path.join(self.cache_dir, f"exploit_{exploit_id}.json")
        
        if os.path.exists(cache_file):
            with open(cache_file, 'r') as f:
                return json.load(f)

        url = f"https://www.exploit-db.com/exploits/{exploit_id}"
        response = requests.get(url)
        details = response.json()

        with open(cache_file, 'w') as f:
            json.dump(details, f)

        return details